provider "aws" {
  region   = "ap-south-1"
  profile  = "sudhanshu"
}

#creating security group
resource "aws_security_group" "allow_tls" {
  name         = "allow_tls"
  description  = "allow ssh and httpd"
 
  ingress {
    description = "SSH Port"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    description = "HTTPD Port"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  } 
  
  ingress {
    description = "Localhost"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "allow_tls"
  }
  
}
#creating key variable 
variable "enter_ur_key_name" {
	type = string
	default = "key1"
}

#create EC2
resource "aws_instance" "myinstance" {
  ami  = "ami-0447a12f28fddb066"
  instance_type = "t2.micro"
  key_name      = var.enter_ur_key_name
  security_groups = ["${aws_security_group.allow_tls.name}"]

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("C:/Users/sudha/Downloads/key1.pem")
    host     = aws_instance.myinstance.public_ip 
 }
 provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd  php git -y",
      "sudo systemctl restart httpd", 
      "sudo systemctl enable httpd",
    ]
  }

  tags = {
     Name = "Sudhanshu"
  }
}

output  "myamazon" {
	value = aws_instance.myinstance.availability_zone
}

output  "my_sec_public_ip" {
	value = aws_instance.myinstance.public_ip
}

resource "aws_ebs_volume" "esb2" {
  availability_zone = aws_instance.myinstance.availability_zone
  size              = 1

  tags = {
    Name = "myebs1"
  }
}

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdd"
  volume_id   = "${aws_ebs_volume.esb2.id}"
  instance_id = "${aws_instance.myinstance.id}"
  force_detach = true
}

output  "myoutebs" {
	value = aws_ebs_volume.esb2.id
}

resource "null_resource" "nulllocal2"  {
	provisioner "local-exec" {
	    command = "echo  ${aws_instance.myinstance.public_ip} > publicip.txt"
  	}
}

resource "null_resource" "nullremote3"  {

depends_on = [
    aws_volume_attachment.ebs_att,
  ]


  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = file("C:/Users/sudha/Downloads/key1.pem")
    host     = aws_instance.myinstance.public_ip
  }

provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4  /dev/xvdh",
      "sudo mount  /dev/xvdh  /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/2sudhanhu/sudhanshu.git /var/www/html/"
    ]
  }
}

resource "aws_ebs_snapshot" "my_snapshot" {
  volume_id = "${aws_ebs_volume.esb2.id}"

  tags = {
    Name = "HelloWorld_snap"
  }
}

resource "null_resource" "nulllocal1"  {


depends_on = [
    null_resource.nullremote3,
  ]

	provisioner "local-exec" {
	    command = "start chrome  ${aws_instance.myinstance.public_ip}"
  	}
}


resource "aws_s3_bucket" "tripathi" {
bucket = "tripathi1"
acl    = "private"
tags = {
Name        = "sudhanshu"
}
}
// Block Public Access
resource "aws_s3_bucket_public_access_block" "s3Public" {
bucket = "${aws_s3_bucket.tripathi.id}"
block_public_acls   = true
block_public_policy = true
restrict_public_buckets = true
}

locals {
s3_origin_id = "sudhanshu12345654321"
}
// Creating Origin Access Identity for CloudFront
resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
comment = "tripathi_ji-bucket"
}
resource "aws_cloudfront_distribution" "tripathi_ji" {
origin {
domain_name = "${aws_s3_bucket.tripathi.bucket_regional_domain_name}"
origin_id   = "${local.s3_origin_id}"
s3_origin_config {

origin_access_identity = "${aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path}"
}
}
enabled             = true
is_ipv6_enabled     = true
comment             = "tripathi_ji-access"
default_cache_behavior {
allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
cached_methods   = ["GET", "HEAD"]
target_origin_id = "${local.s3_origin_id}"
forwarded_values {
query_string = false
cookies {
forward = "none"
}
}
viewer_protocol_policy = "allow-all"
min_ttl                = 0
default_ttl            = 3600
max_ttl                = 86400
}
# Cache behavior with precedence 0
ordered_cache_behavior {
path_pattern     = "/content/immutable/*"
allowed_methods  = ["GET", "HEAD", "OPTIONS"]
cached_methods   = ["GET", "HEAD", "OPTIONS"]
target_origin_id = "${local.s3_origin_id}"
forwarded_values {
query_string = false
headers      = ["Origin"]
cookies {
forward = "none"
}
}
min_ttl                = 0
default_ttl            = 86400
max_ttl                = 31536000
compress               = true
viewer_protocol_policy = "redirect-to-https"
}
# Cache behavior with precedence 1
ordered_cache_behavior {
path_pattern     = "/content/*"
allowed_methods  = ["GET", "HEAD", "OPTIONS"]
cached_methods   = ["GET", "HEAD"]
target_origin_id = "${local.s3_origin_id}"
forwarded_values {
query_string = false
cookies {
forward = "none"
}
}
min_ttl                = 0
default_ttl            = 3600
max_ttl                = 86400
compress               = true
viewer_protocol_policy = "redirect-to-https"
}
price_class = "PriceClass_200"
restrictions {
geo_restriction {
restriction_type = "blacklist"
locations        = ["CA"]
}
}
tags = {
Environment = "production"
}
viewer_certificate {
cloudfront_default_certificate = true
}
retain_on_delete = true
}
